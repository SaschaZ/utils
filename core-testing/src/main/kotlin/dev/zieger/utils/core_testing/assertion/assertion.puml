@startuml

set namespaceSeparator none
hide empty members
skinparam ArrowThickness 1
skinparam Class {
    BorderColor #000000
    BorderThickness 1
    BackgroundColor #FFFFFF
}
skinparam Package {
    BorderColor #000000
    BorderThickness 1
    BackgroundColor #FFFFFF
}
skinparam Shadowing true

hide stereotype
namespace dev.zieger.utils.core_testing.assertion <<Package>> {

	class  "**Globals**" as dev.zieger.utils.core_testing.assertion.**Globals**  << (G, #FFFFFF) >>  {
		+String.assert(expected; Regex): UNKNOWN EXPRESSION
		+UNKNOWN TYPE.onFail(message; String): UNKNOWN EXPRESSION
		+UNKNOWN TYPE.onFail(message; No name): UNKNOWN EXPRESSION
		+UNKNOWN TYPE.assert(expected; UNKNOWN TYPE): UNKNOWN EXPRESSION
		+ActualMessageScope<T>.assert(expected; UNKNOWN TYPE): UNKNOWN EXPRESSION
	}

	interface  "IValidationScope" as dev.zieger.utils.core_testing.assertion.IValidationScope << (I, #BB88FF) >> {
		+validate(): Unit
	}

	class  "ActualMessageScope" as dev.zieger.utils.core_testing.assertion.ActualMessageScope << (C, #0AFFA0) >> {
		+actual: UNKNOWN TYPE
		+message: UNKNOWN PROPERTY TYPE
	}

	interface  "IActualScope" as dev.zieger.utils.core_testing.assertion.IActualScope << (I, #BB88FF) >> {
		+actual: Actual
	}

	interface  "IActualMessageScope" as dev.zieger.utils.core_testing.assertion.IActualMessageScope << (I, #BB88FF) >> {
		+message: Message
	}

	class  "AssertEqualsScope" as dev.zieger.utils.core_testing.assertion.AssertEqualsScope << (C, #0AFFA0) >> {
		+expected: UNKNOWN TYPE
		+scope: ActualMessageScope<UNKNOWN TYPE>
		+validate(): UNKNOWN BLOCK
	}

	class  "AssertRegexScope" as dev.zieger.utils.core_testing.assertion.AssertRegexScope << (C, #0AFFA0) >> {
		+expected: Expected
		-regex: Regex
		+scope: ActualMessageScope<String>
		+validate(): UNKNOWN BLOCK
	}

	interface  "ActualExpectedScope" as dev.zieger.utils.core_testing.assertion.ActualExpectedScope << (I, #BB88FF) >> {
		+actual: Actual
		+expected: Expected
	}

}
dev.zieger.utils.core_testing.assertion.ActualMessageScope --|> dev.zieger.utils.core_testing.assertion.IActualMessageScope
dev.zieger.utils.core_testing.assertion.IValidationScope -|> dev.zieger.utils.core_testing.assertion.ActualExpectedScope
dev.zieger.utils.core_testing.assertion.AssertEqualsScope --|> dev.zieger.utils.core_testing.assertion.IActualMessageScope
dev.zieger.utils.core_testing.assertion.IValidationScope --|> dev.zieger.utils.core_testing.assertion.IActualMessageScope
dev.zieger.utils.core_testing.assertion.IActualMessageScope -|> dev.zieger.utils.core_testing.assertion.IActualScope
dev.zieger.utils.core_testing.assertion.AssertRegexScope --|> dev.zieger.utils.core_testing.assertion.IActualMessageScope
dev.zieger.utils.core_testing.assertion.AssertEqualsScope --|> dev.zieger.utils.core_testing.assertion.IValidationScope
dev.zieger.utils.core_testing.assertion.AssertRegexScope --|> dev.zieger.utils.core_testing.assertion.IValidationScope

@enduml